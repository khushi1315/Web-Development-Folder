{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khush\\\\OneDrive\\\\Desktop\\\\WebDevFiles\\\\REACT\\\\TextUtilities\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport { createBrowserRouter, RouterProvider } from \"react-router\";\nimport About from './components/About';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const router = createBrowserRouter([{\n    path: \"/about\",\n    element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 15\n    }, this)\n  }, {\n    path: \"/home\",\n    element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 15\n    }, this)\n  }]);\n  const [mode, SetMode] = useState('light');\n  const toggleMode = () => {\n    if (mode === 'light') {\n      SetMode('dark');\n      document.body.style.backgroundColor = 'black'; // Apply dark background to body\n      document.body.style.color = 'white';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils-Dark Mode\";\n    } else {\n      SetMode('light');\n      document.body.style.backgroundColor = 'white'; // Reset background for light mode\n      document.body.style.color = 'black';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils-Light Mode\";\n    }\n  };\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      mode: mode,\n      about: \"About\",\n      toggleMode: toggleMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        alert: alert,\n        onClose: () => setAlert(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `container my-3 `,\n      children: /*#__PURE__*/_jsxDEV(TextForm, {\n        showAlert: showAlert,\n        heading: \"Enter text to analyze\",\n        mode: mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(RouterProvider, {\n      router: router\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"J/Mois044O/UB18AmBy1FlPfp10=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Navbar","TextForm","Alert","createBrowserRouter","RouterProvider","About","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","Home","mode","SetMode","toggleMode","document","body","style","backgroundColor","color","showAlert","title","alert","setAlert","message","type","msg","setTimeout","children","about","onClose","className","heading","_c","$RefreshReg$"],"sources":["C:/Users/khush/OneDrive/Desktop/WebDevFiles/REACT/TextUtilities/my-app/src/App.js"],"sourcesContent":["\nimport React, { useState } from 'react';\n\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport { createBrowserRouter,RouterProvider} from \"react-router\";\nimport About from './components/About';\n\n\nfunction App() {\n  const router= createBrowserRouter([\n    {\n      path:\"/about\",\n      element:<About/>\n    },\n    {\n      path:\"/home\",\n      element:<Home/>\n    },\n  \n  ])\n  const [mode, SetMode] = useState('light');\n\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      SetMode('dark');\n      document.body.style.backgroundColor = 'black'; // Apply dark background to body\n      document.body.style.color = 'white';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils-Dark Mode\"\n    }\n    else {\n      SetMode('light');\n      document.body.style.backgroundColor = 'white'; // Reset background for light mode\n      document.body.style.color = 'black';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils-Light Mode\"\n    }\n  }\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n\n\n  return (\n    <>\n\n\n      <Navbar mode={mode} about=\"About\" toggleMode={toggleMode} />\n\n      <div>\n        <Alert alert={alert} onClose={() => setAlert(null)} />\n      </div>\n\n       <div className={`container my-3 `}>\n        <TextForm showAlert={showAlert} heading=\"Enter text to analyze\" mode={mode} />\n      </div> \n      <RouterProvider router={router}/>\n\n      \n        \n\n\n    </>\n\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}